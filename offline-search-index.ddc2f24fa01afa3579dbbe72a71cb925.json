[{"body":" This is just a summary on how to get started. If you are stuck or have any questions, please join our Discord server and give us a shout on the #dev channel\nAny IDE with good support for GoLang and JavaScript/Node can be used for Navidrome development. We suggest using Visual Studio Code, which has excellent support for both languages.\nUsing VSCode + Dev Container (Docker) The project includes a VSCode Dev Container configuration for using with Docker. The Dev Container provides all dependencies out-of-the-box. If you prefer to install all dependencies yourself, or cannot/don’t want to install Docker for any reason, see the other sections below for step by step instructions for your OS.\nNote Keep in mind that the overall experience when using Docker Desktop for development will be slower than normal, because access to the host OS filesystem is generally slower. If you want to have full performance, we recommend installing the dependencies directly on your system and skip using Docker for development. Unix-based systems (Linux, macOS, BSD, …) Install GoLang 1.20+\nInstall Node 16\nInstall TagLib\nUbuntu: sudo apt install libtag1-dev Arch Linux: pacman -S taglib macOS: brew install taglib For other platforms check their installation instructions Install pkg-config\nClone the project from https://github.com/navidrome/navidrome\nInstall development tools: make setup. This may take a while to complete\nTest installation: make buildall. This command should create a navidrome executable in the project’s folder\nCreate a navidrome.toml config file in the project’s folder with (at least) the following options:\n# Set your music folder, preferable a specific development music library with few songs, # to make scan fast MusicFolder = \"/path/to/music/folder\" # Make logging more verbose LogLevel = \"debug\" # This option will always create an `admin` user with the specified password, so you don't # have to create a user every time you delete your dev database DevAutoCreateAdminPassword = \"password\" # Move the data/DB folder out of the root. `./data` folder is ignored by git DataFolder = \"./data\" # If you are developing in macOS with its firewall enabled, uncomment the next line to avoid # having to accept incoming network connections every time the server restarts: # Address = \"localhost\" To start Navidrome in development mode, just run make dev. This will start both the backend and the frontend in “watch” mode, so any changes will automatically be reloaded. It will open Navidrome automatically in your browser, using the URL http://localhost:4533/\nIf it does not open a new window in your browser, check the output for any error messages.\nFor more useful make targets, run make help.\nWindows (using WSL) Even though it is possible to setup a fully working Navidrome development environment in Windows, we currently don’t provide instructions for that (feel free to contribute to these docs if you successfully set it up).\nThe (arguably better) alternative is to set up the project using Visual Studio Code and WSL, which effectively lets you develop in a Linux environment while still using your Windows system.\nInstalling WSL Make sure your Windows 10 is updated. Go to Settings \u003e Turn Windows feature on or off \u003e Windows subsystem for Linux. Go to Microsoft Store and download and install any Linux distro you like. For maximum compatibility, we recommend Ubuntu. Open Downloaded Linux distro, add username and password and then update it using: sudo apt update \u0026\u0026 sudo apt upgrade -y. Install needed compilers for building Navidrome: sudo apt install gcc g++ This will create an Linux terminal where you can execute any Linux commands. Make sure you are using WSL 2.0\nConfiguring Visual Studio Code Click on Extensions (present on leftmost column), install Remote Development extension and reload VSCode. Press F1, execute Remote-WSL: New Window. This will connect your installed Linux distro to VSCode. Now you can open a VSCode terminal and you’ll be able to run any Linux command. Common Issues Because of this WSL issue you need to use your network IP address to be able to login to Navidrome in development mode. Otherwise you will get an Error: Unauthorized when logging in. You can see your network IP address after running make dev. Now that you have a working instance of Linux running on your machine, follow the steps above for Unix-based system in the VSCode terminal. For more information on working with VSCode+WSL, check their documentation.\nTroubleshooting System limit for number of file watchers reached If you encounter the Error: ENOSPC: System limit for number of file watchers reached, watch while running make dev on Linux systems, then your system is maxing out the number of files that can be “watched” for changes at one time.\nTo increase this limit, you can run the command echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf \u0026\u0026 sudo sysctl -p, which adds the line fs.inotify.max_user_watches=524288 to /etc/sysctl.conf and reloads sysctl so the change takes effect. this allows inotify to watch more files and folders for changes at a time.\nMore information about this can be found here\n","categories":"","description":"How to setup your local development environment\n","excerpt":"How to setup your local development environment\n","ref":"/docs/developers/dev-environment/","tags":"","title":"Development Environment"},{"body":"Navidrome can be used as a standalone server, that allows you to browse and listen to your music collection using a web browser.\nIt can also work as a lightweight Subsonic-API compatible server, that can be used with any Subsonic compatible client.\nFeatures Very low resource usage. Runs well even on simple Raspberry Pi Zero and old hardware setups Handles very large music collections Streams virtually any audio format available Reads and uses all your beautifully curated metadata Great support for compilations (Various Artists albums) and box sets (multi-disc albums) Multi-user, each user has their own play counts, playlists, favorites, etc.. Multi-platform, runs on macOS, Linux and Windows. Docker images are also provided Ready to use, official, Raspberry Pi binaries and Docker images available Automatically monitors your library for changes, importing new files and reloading new metadata Themeable, modern and responsive Web interface based on Material UI and React-Admin Compatible with all Subsonic/Madsonic/Airsonic clients. See below for a list of tested clients Transcoding on the fly. Can be set per user/player. Opus encoding is supported Translated to 17 languages (and counting) Full support for playlists, with option to auto-import .m3u files and to keep them in sync Smart/dynamic playlists (similar to iTunes). More info here Scrobbling to Last.fm, ListenBrainz and Maloja (via custom ListenBrainz URL) Sharing public links to albums/songs/playlists Reverse Proxy authentication* Features supported by the Subsonic API Tag-based browsing/searching Simulated browsing by folders (see note below) Playlists Bookmarks (for Audiobooks) Starred (favourites) Artists/Albums/Tracks 5-Star Rating for Artists/Albums/Tracks Transcoding and Downsampling Get/Save Play Queue (to continue listening in a different device) Last.fm and ListenBrainz scrobbling Artist Bio from Last.fm Artist Images from Spotify (requires configuration) Album images and description from Last.fm Lyrics (currently only from embedded tags) Internet Radios Shares (experimental support) NOTE Navidrome does not support browsing by folders, but simulates it based on the tags with a structure like: /AlbumArtist/Album/01-Song.ext Apps Besides its own Web UI, Navidrome should be compatible with all Subsonic clients. The following clients are tested and confirmed to work properly:\niOS: play:Sub, substreamer, Amperfy and iSub Android: DSub, Subtracks, substreamer, Symfonium and Ultrasonic Web: Feishin, Thunderdrome, Airsonic Refix, Subplayer, Aurial, Jamstash and Subfire Desktop: Sonixd (Windows/Linux/macOS), Feishin (Linux/macOS), Sublime Music (Linux), Supersonic (Windows/Linux/macOS) and Submariner (macOS) CLI: Jellycli (Windows/Linux) and STMP (Linux/macOS) Connected Speakers: Sonos: bonob Alexa: AskSonic Other: Subsonic Kodi Plugin Navidrome Kodi Plugin HTTPDirFS upmpdcli: expose Navidrome as a UPnP/DLNA media library. See the discussion. For more options, look at the list of clients maintained by the Airsonic project.\nRoad map This project is in active development. Expect a more polished experience and new features/releases on a frequent basis. Some upcoming features planned:\nMultiple Artists Multiple folders UI to edit Smart playlists Jukebox mode (plays music on an audio device attached to the server, and control from the UI/Mobile client) Support more tags (including multi-valued tags) ","categories":"","description":"Learn more about Navidrome's features\n","excerpt":"Learn more about Navidrome's features\n","ref":"/docs/overview/","tags":"","title":"Navidrome Overview"},{"body":"Download If you are using Docker, you can skip download and just head to the Docker setup page. If you prefer a managed hosting solution in the cloud, you can use PikaPods.\nVisit our releases page in GitHub and download the latest version for your platform. There are builds available for Linux (Intel and ARM, 32 and 64 bits), Windows (Intel 32 and 64 bits) and macOS (Intel 64 bits).\nFor ARM-Based systems (ex: Raspberry Pi), check which ARM build is the correct one for your platform using cat /proc/cpuinfo.\nRemember to install ffmpeg in your system, a requirement for Navidrome to work properly. If your OS does not provide a package for ffmpeg, you may find the latest static build for your platform here: https://johnvansickle.com/ffmpeg/.\nSetup After downloading the Navidrome binary, follow the appropriate setup instructions for your platform:\n","categories":"","description":"Learn how to install Navidrome on your specific platform\n","excerpt":"Learn how to install Navidrome on your specific platform\n","ref":"/docs/installation/","tags":"","title":"Installation"},{"body":"After installing Navidrome in your platform, you need to create your first user. This will be your admin user, a super user that can manage all aspects of Navidrome, including the ability to manage other users. Just browse to Navidrome’s homepage at http://localhost:4533 and you will be greeted with a screen like this:\nJust fill out the username and password you want to use, confirm the password and click on the “Create Admin” button.\nThat’s it! You should now be able to browse and listen to all your music.\nNote: It usually take a couple of minutes for your music to start appearing in Navidrome’s UI. You can check the logs to see what is the scan progress. If you see any errors, reach out and we can help you\nNote: If you have any .m3u playlist in your music folder, they should be added as playlist in Navidrome automatically. However, Navidrome only does that when there is an admin user. On a fresh installation, it can happen that Navidrome already finished scanning your music folder before you created the first admin user. In that case, you need to make sure the “last modified” date of the m3u files is newer than the last scan. On Linux and macOS systems, this can be done with the touch command.\n","categories":"","description":"Already installed? Play us a song, Navidrome!\n","excerpt":"Already installed? Play us a song, Navidrome!\n","ref":"/docs/getting-started/","tags":"","title":"Getting Started"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/usage/","tags":"","title":"Usage"},{"body":"This page is for developers looking to learn more about Navidrome. For information about contributing to Navidrome, see the Navidrome Contribution Guide.\n","categories":"","description":"Information for Developers.\n","excerpt":"Information for Developers.\n","ref":"/docs/developers/","tags":"","title":"Developers"},{"body":"Introduction Navidrome started in February 2016 as a modern and lightweight alternative to Subsonic: written in Go/React, implementing the subsonic API and thus compatible with all the subsonic clients in the world, licensed under GPL3, … Being relatively young, it does come/use modern development practices like continuous integration, a comprehensive testsuite, a relatively clean codebase, automatic dependency upgrades, automatic linting/CI/static analysis/… on each pull-request, comprehensive documentation … It recently gained popularity due to the decay of Subsonic/Airsonic, and currently has more than 4M downloads of its docker image, and had its binaries downloaded more than 12k times.\nA demo version is available as well: https://demo.navidrome.org\nMentors and Contacts We’re using discord for communications, feel free to join.\nAs for the mentors:\nDeluan Quintão (ET): deluan – @deluan Julien Voisin (CET): jvoisin – @dustriorg Development methodology The main repository is hosted on Github, which is also used for tracking bugs and running the continuous integration. The main communication medium is Discord, along with Twitter for announcements, and Reddit as general purpose forum. The usual way to get code in is to submit a pull-request, which will be reviewed by the community and merged. Adding some tests might of course speed up this process.\nInstructions for students Students willing to take part in the Google Summer of Code 2021 with navidrome should send a couple of pull-requests, to demonstrate that they’re both motivated and capable of writing code and contributing to the project.\nTech stack Server: Go SQLite3 Frontend (WebUI) React React Admin Material-UI Redux Recommended steps Read Google’s instructions for participating Grab any project from the list of ideas that you’re interested in (or even suggest your own!). Write a first draft proposal and ask one of the mentors to review it with you. Submit it using Google’s web interface. Student proposal guidelines Keep it simple enough to fit in no more than a couple of pages. Try to be clear and concise in your writing. Try to split GSoC period into tasks, and each task into subtasks. It helps us to understand how you plan to accomplish your goals, but more importantly, it’ll help you to understand the task deep enough before starting, and prioritize important things to do first. Please, note, how much time a day/week you are able to spend on this project. We do expect something between 30h and 40h. Submit your proposal early, not at the last minute! Feel free to choose a “backup” idea (the second task you want to do), so that conflicts (two students for one task) can be resolved. Ideas 1. Media sharing One of the nice features of Subsonic is its ability to generate a sharing link for a track/album/artist/playlist to send to friends, so that they can listen/download the music without having an account on your instance. This is a nice alternative to youtube links to share music. A nice way to implement this would be to have a table of shares, with a shorturl as ID. The table would store a reference to what is being shared. This shorturl would be used by a public endpoint. We would also need a standalone player similar to what is provided by Spotify when you share music through their service. Ex:\nSteps Add a table for shares Add a way to create shares in the UI Implement the Subsonic API related endpoints: getShares, createShare, updateShare and deleteShare Add a standalone player (could be based on our current React Player) Details Skill level: Medium Required abilities: Go and willing to learn a bit of React Expected outcome: Ability to share music with friends. Links and further reading https://github.com/deluan/navidrome/issues/748 2. Jukebox mode Some servers can be run in “jukebox” mode where the music is played directly on the server’s audio hardware, ex: mpd and Subsonic. A tricky part of this task might be to properly expose the “jukebox client” in the WebUI interface, as the current react-music-player used by Navidrome would have to somehow control the jukebox (via API) instead of the browser’s Audio component.\nSteps Implementing a minimal subsonic client in go to connect to the server Implementing an audio output for the subsonic client Implementing the frontend part to select the jukebox mode and control the subsonic client Implementing the Subsonic API’s jukeboxControl endpoint Details Skill level: Hard Required abilities: Go and React, a bit of UX would be nice Expected outcome: Ability to play music from the device running navidrome. Links and further reading https://github.com/deluan/navidrome/issues/364 https://airsonic.github.io/docs/jukebox/ http://subsonic.org/pages/api.jsp#jukeboxControl 3. Google home/alexa integration Nowadays, tech-oriented people tend to have a home assistant, and thus might want to be able to use it to control their subsonic instance. Since there is already the subsonic API to perform actions, this task on “only” a matter of writing the glue between Alexa/Google home and the API. Some actions might require a bit more than glue, for example, to play specific tracks/albums.\nThis task can be nicely paired with the jukebox one.\nSteps Implementing the glue between Alexa/Google home and the Subsonic API Implementing the frontend part to configure this machinery Details Skill level: Hard Required abilities: Go, having an Alexa/Google Home is a plus, but worse case we can send the student a device. Expected outcome: Ability to play/pause/next/previous the music via a home assistant Links and further reading https://github.com/deluan/navidrome/issues/682 https://developers.google.com/assistant/ https://developer.amazon.com/en-US/alexa/alexa-skills-kit 4. Multiple libraries support Some users want to use multiple libraries at the same time, for example to separate lossy/lossless albums, one for official albums and an other for bootlegs/lives, or one for audiobooks, some are even dreaming about having remote ones to listen to their friend’s music without leaving their navidrome instance!\nSteps Implement support for multiple libraries Implement the UI allowing users to switch between libraries Implement permissions: Which user has access to which library Implement the musicFolderId attribute in most Subsonic API endpoints Plus: Implement support to access remote libraries from the WebUI Details Skill level: Hard Required abilities: Go and SQL, and a teensy bit of react for the UX Expected outcome: Ability to use multiple libraries within a single user account Links and further reading https://github.com/deluan/navidrome/issues/192 http://subsonic.org/pages/api.jsp#getMusicFolders 5. Omnisearch One search bar to search across the whole library, using proper SQLite’s Full Text Search, instead of having one separate search field per domain (artist, album, …)\nSteps Replace current search implementation on the server with a new one using SQLite3’s FTS5 Implement a search bar in the WebUI on the NavBar Implement a Search Results page, with links to artists, albums, songs and playlists Plus: integrate FTS5 with Spellfix1, to enable search for close matches. May not be supported by go-sqlite3 library used by Navidrome Details Skill level: Medium Required abilities: Go and React.JS Expected outcome: Ability to have a single search field operating across all the library Links and further reading https://github.com/deluan/navidrome/issues/255 https://github.com/deluan/navidrome/issues/468 https://www.sqlite.org/fts5.html https://www.sqlite.org/spellfix1.html#overview 6. Infinite Scroll Currently, navidrome is using pagination instead of providing a more convenient infinite-scroll. The implementation isn’t trivial because navidrome is using react-admin, which not only doesn’t provide this feature out of the box, but makes it non-trivial to implement.\nSteps Implement a new List component for React-Admin, that does not use pagination. It should load new data on demand. This component should be usable in all places where we currently use React-Admin’s List Details Skill level: Medium Required abilities: React.JS, with a bit of Go and SQL Expected outcome: Infinite scrolling is implemented and usable. Links and further reading https://github.com/deluan/navidrome/issues/132 https://marmelab.com/blog/2019/01/17/react-timeline.html https://marmelab.com/react-admin/List.html#uselistcontroller 7. Lyrics support It would be nice for navidrome to support LRC files to display lyrics. A possible stretch goal would be to implement lyrics fetching.\nSteps Implement lyrics importing (from tags or external .lrc files) Make navidrome library aware of the presence of lyrics Implement Subsonic API’s getLyrics endpoint In the WebUI, when lyrics are available for the current song being played, set the appropriate attributes of the React Music Player used Details Skill level: Easy Required abilities: Go and React.JS Expected outcome: Ability to see lyrics in the WebUI or Subsonic client when playing a song Links and further reading https://github.com/deluan/navidrome/issues/249 http://subsonic.org/pages/api.jsp#getLyrics https://github.com/lijinke666/react-music-player 8. Volume normalization It would be nice if navidrome could perform audio normalization, to avoid having to fiddle with the volume when listening to different tracks of various volumes.\nSteps Expose a preference to the user Implement per-track normalization Implement per-album normalization Details Skill level: Easy Required abilities: Go and React.JS Expected outcome: Ability to have constant volume output in navidrome Links and further reading https://github.com/deluan/navidrome/issues/233 https://en.wikipedia.org/wiki/Audio_normalization https://trac.ffmpeg.org/wiki/AudioVolume 9. New Album grid It would be nice to have something resembling Plex’s interface, with covert art fading in, as well as a slider to adjust their size.\nSteps Implement the slider for the covers Implement asynchronous loading for the covers Implement the fading in upon loading Details Skill level: Medium Required abilities: React.JS / Material-UI Expected outcome: Have a plex-looking album grid, with fading, scaling and async loading Links and further reading https://github.com/deluan/navidrome/issues/323 https://www.plex.tv/ Links and resources GSoC 2021 timeline GSoC FAQ GSoC student guide ","categories":"","description":"Navidrome GSoC 2021 information\n","excerpt":"Navidrome GSoC 2021 information\n","ref":"/docs/gsoc/","tags":"","title":"Google Summer of Code 2021"},{"body":"Navidrome allows some customization using environment variables, loading from a configuration file or using command line arguments.\nConfiguration File Navidrome tries to load the configuration from a navidrome.toml file in the current working directory, if it exists. You can create this file and put any of the configuration options below in it. Example of a configuration file for Windows (should be similar for other systems, just use forward slashes for paths):\nExample: Windows macOS Unix-based systems # This is just an example! Please see available options to customize Navidrome for your needs at # https://www.navidrome.org/docs/usage/configuration-options/#available-options LogLevel = 'DEBUG' ScanSchedule = '@every 24h' TranscodingCacheSize = '150MiB' # IMPORTANT: Use single quotes for paths in Windows MusicFolder = 'C:\\Users\\JohnDoe\\Music' # Set this to the path of your ffmpeg executable FFmpegPath = 'C:\\Program Files\\ffmpeg\\bin\\ffmpeg.exe' # This is just an example! Please see available options to customize Navidrome for your needs at\r# https://www.navidrome.org/docs/usage/configuration-options/#available-options\rLogLevel = 'DEBUG'\rScanSchedule = '@every 24h'\rTranscodingCacheSize = '150MiB'\rMusicFolder = '/Users/JohnDoe/Music'\r# This is the default path for Homebrew installed ffmpeg\rFFmpegPath = '/usr/local/bin/ffmpeg'\r# This is just an example! Please see available options to customize Navidrome for your needs at\r# https://www.navidrome.org/docs/usage/configuration-options/#available-options\rLogLevel = 'DEBUG'\rScanSchedule = '@every 24h'\rTranscodingCacheSize = '150MiB'\rMusicFolder = '/mnt/music'\rYou can also specify a different path for the configuration file, using the -c/--configfile option. Navidrome can load the configuration from toml, json, yml and ini files.\nThe example below assume you have created a navidrome.toml file in your home directory:\nExample: Windows macOs Unix-based systems C:\\\u003e navidrome --configfile \"c:\\User\\JohnDoe\\navidrome.toml\"\r$ navidrome --configfile \"/User/JohnDoe/navidrome.toml\"\r$ navidrome --configfile \"/home/johndoe/navidrome.toml\"\rCommand Line Arguments You can set most of the config options below passing arguments to navidrome executable.\nThe example below shows how to set the MusicFolder using the command line, assuming you have your music library under your home directory:\nExample: Windows macOs Unix-based systems C:\\\u003e navidrome --musicfolder \"c:\\User\\JohnDoe\\Music\"\r$ navidrome --musicfolder \"/User/JohnDoe/Music\"\r$ navidrome --musicfolder \"/mnt/music\"\rPlease note that command line arguments must be all lowercase. For a list of all available command line options, just call navidrome --help.\nEnvironment Variables Any configuration option can be set as an environment variable, just add a the prefix ND_ and make it all uppercase. Ex: ND_LOGLEVEL=debug. See below for all available options\nAvailable Options Basic configuration In config file As an env var Description Default Value ND_CONFIGFILE Load configurations from an external config file \"./navidrome.toml\" MusicFolder ND_MUSICFOLDER Folder where your music library is stored. Can be read-only \"./music\" DataFolder ND_DATAFOLDER Folder to store application data (DB, cache…) \"./data\" LogLevel ND_LOGLEVEL Log level. Useful for troubleshooting. Possible values: error, warn, info, debug, trace \"info\" Address ND_ADDRESS IP address the server will bind to 0.0.0.0 and :: (all IPs) BaseUrl ND_BASEURL Base URL (only the path part) to configure Navidrome behind a proxy (ex: /music) Empty Port ND_PORT HTTP port Navidrome will use 4533 Advanced configuration In config file As an env var Description Default Value AuthRequestLimit* ND_AUTHREQUESTLIMIT How many login requests can be processed from a single IP during the AuthWindowLength. Set to 0 to disable the limit rater 5 AuthWindowLength* ND_AUTHWINDOWLENGTH Window Length for the authentication rate limit \"20s\" AutoImportPlaylists ND_AUTOIMPORTPLAYLISTS Enable/disable .m3u playlist auto-import true CoverArtPriority ND_COVERARTPRIORITY Configure the order to look for cover art images. Use special embedded value to get embedded images from the audio files cover.*, folder.*, front.*, embedded, external CoverJpegQuality ND_COVERJPEGQUALITY Set JPEG quality percentage for resized cover art images 75 DefaultDownsamplingFormat ND_DEFAULTDOWNSAMPLINGFORMAT Format to transcode to when client requests downsampling (specify maxBitrate without a format) opus DefaultLanguage ND_DEFAULTLANGUAGE Sets the default language used by the UI when logging in from a new browser. This value must match one of the file names in the resources/i18n. Ex: for Chinese Simplified it has to be zh-Hans (case sensitive) \"en\" DefaultTheme ND_DEFAULTTHEME Sets the default theme used by the UI when logging in from a new browser. This value must match one of the options in the UI Dark EnableArtworkPrecache ND_ENABLEARTWORKPRECACHE Enable image pre-caching of new added music true EnableCoverAnimation ND_ENABLECOVERANIMATION Controls whether the player in the UI will animate the album cover (rotation) true EnableDownloads ND_ENABLEDOWNLOADS Enable the option in the UI to download music/albums/artists/playlists from the server true EnableExternalServices ND_ENABLEEXTERNALSERVICES. Set this to false to completely disable ALL external integrations true EnableFavourites ND_ENABLEFAVOURITES Enable toggling “Heart”/“Loved” for songs/albums/artists in the UI (maps to “Star”/“Starred” in Subsonic Clients) true EnableGravatar ND_ENABLEGRAVATAR Use Gravatar images as the user profile image. Needs the user’s email to be filled false EnableLogRedacting ND_ENABLELOGREDACTING Whether or not sensitive information (like tokens and passwords) should be redacted (hidden) in the logs true EnableMediaFileCoverArt* ND_ENABLEMEDIAFILECOVERART If set to false, it will return the album CoverArt when a song CoverArt is requested true EnableReplayGain ND_ENABLEREPLAYGAIN Enable ReplayGain options in the UI true EnableSharing ND_ENABLESHARING Enable the Sharing feature false EnableStarRating ND_ENABLESTARRATING Enable 5-star ratings in the UI true EnableTranscodingConfig* ND_ENABLETRANSCODINGCONFIG Enables transcoding configuration in the UI false EnableUserEditing ND_ENABLEUSEREDITING Enable regular users to edit their details and change their password true FFmpegPath ND_FFMPEGPATH Path to ffmpeg executable. Use it when Navidrome cannot find it, or you want to use a specific version Empty (search in the PATH) GATrackingID ND_GATRACKINGID Send basic info to your own Google Analytics account. Must be in the format UA-XXXXXXXX Empty (disabled) IgnoredArticles ND_IGNOREDARTICLES List of ignored articles when sorting/indexing artists \"The El La Los Las Le Les Os As O A\" ImageCacheSize ND_IMAGECACHESIZE Size of image (art work) cache. Set to \"0\" to disable cache \"100MB\" LastFM.ApiKey ND_LASTFM_APIKEY Last.fm ApiKey Navidrome project’s shared ApiKey LastFM.Enabled ND_LASTFM_ENABLED Set this to false to completely disable Last.fm integration true LastFM.Language ND_LASTFM_LANGUAGE Two letter-code for language to be used to retrieve biographies from Last.fm \"en\" LastFM.Secret ND_LASTFM_SECRET Last.fm Shared Secret Navidrome project’s shared Secret ListenBrainz.BaseURL ND_LISTENBRAINZ_BASEURL Set this to override the default ListenBrainz base URL (useful with self-hosted solutions like Maloja* https://api.listenbrainz.org/1/ ListenBrainz.Enabled ND_LISTENBRAINZ_ENABLED Set this to false to completely disable ListenBrainz integration true MaxSidebarPlaylists ND_MAXSIDEBARPLAYLISTS Set the maximum number of playlists shown in the UI’s sidebar. Note that a very large number can cause UI performance issues. 100 PasswordEncryptionKey* ND_PASSWORDENCRYPTIONKEY Passphrase used to encrypt passwords in the DB. Click here for details - PlaylistsPath ND_PLAYLISTSPATH Where to search for and import playlists from. Can be a list of folders/globs (separated by : (or ; on Windows). Paths MUST be relative to MusicFolder \".:**/**\" (meaning MusicFolder and all its subfolders) Prometheus.Enabled ND_PROMETHEUS_ENABLED Enable extra endpoint with Prometheus metrics. false Prometheus.MetricsPath ND_PROMETHEUS_METRICSPATH Custom path for Prometheus metrics. Useful for blocking unauthorized metrics requests. \"/metrics\" RecentlyAddedByModTime ND_RECENTLYADDEDBYMODTIME Uses music files’ modification time when sorting by “Recently Added”. Otherwise use import time false ReverseProxyUserHeader* ND_REVERSEPROXYUSERHEADER HTTP header containing user name from authenticated proxy \"Remote-User\" ReverseProxyWhitelist* ND_REVERSEPROXYWHITELIST Comma separated list of IP CIDRs which are allowed to use reverse proxy authentication, empty means “deny all” Empty Scanner.Extractor ND_SCANNER_EXTRACTOR Select metadata extractor implementation. Options: taglib or ffmpeg \"taglib\" Scanner.GenreSeparators ND_SCANNER_GENRESEPARATORS List of separators to split genre tags \";/,\" ScanSchedule ND_SCANSCHEDULE Configure periodic scans using “cron” syntax. To disable it altogether, set it to \"0\" \"@every 1m\" SearchFullString ND_SEARCHFULLSTRING Match query strings anywhere in searchable fields, not only in word boundaries. Useful for languages where words are not space separated false SessionTimeout ND_SESSIONTIMEOUT How long Navidrome will wait before closing web ui idle sessions \"24h\" Spotify.ID* ND_SPOTIFY_ID Spotify Client ID. Required if you want Artist images Empty Spotify.Secret* ND_SPOTIFY_SECRET Spotify Client Secret. Required if you want Artist images Empty SubsonicArtistParticipations ND_SUBSONICARTISTPARTICIPATIONS When requesting artist’s albums, include albums where the artist participates (ex: Various Artists compilations) false TranscodingCacheSize ND_TRANSCODINGCACHESIZE Size of transcoding cache. Set to \"0\" to disable cache \"100MB\" UILoginBackgroundUrl ND_UILOGINBACKGROUNDURL Change background image used in the Login page random music image from Unsplash.com UIWelcomeMessage ND_UIWELCOMEMESSAGE Add a welcome message to the login screen Empty Notes Durations are specified as a number and a unit suffix, such as “24h”, “30s” or “1h10m”. Valid time units are “s”, “m”, “h”. Sizes are specified as a number and an optional unit suffix, such as “1GB” or “150 MiB”. Default unit is bytes. Note: “1KB” == “1000”, “1KiB” == “1024” Transcoding can be required in some situations. For example: trying to play a WMA file in a webbrowser, will only work for natively supported formats by the browser you are using. (so playing that with Mozilla Firefox on Linux, will not work. Mozilla even have their own guide about audio codecs). ","categories":"","description":"How to customize Navidrome to your environment\n","excerpt":"How to customize Navidrome to your environment\n","ref":"/docs/usage/configuration-options/","tags":"","title":"Navidrome Configuration Options"},{"body":"Themes in Navidrome are simple Material-UI themes. They are basic JS objects, that allow you to override almost every visual aspect of Navidrome’s UI.\nSteps to create a new theme: Create a new JS file in the ui/src/themes folder that exports an object containing your theme. Create the theme based on the ReactAdmin/Material UI documentation below. See the existing themes for examples. Add a themeName property to your theme. This will be displayed in the theme selector Add your new theme to the ui/src/themes/index.js file Start the application, your new theme should now appear as an option in the theme selector Before submitting a pull request to include your theme in Navidrome, please test your theme thoroughly and make sure it is formatted with the Prettier rules found in the project (ui/src/.prettierrc.js). Also, don’t forget to add lots of screenshots!\nResources for Material-UI theming Start reading ReactAdmin documentation Color Tool: https://material-ui.com/customization/color/#official-color-tool ","categories":"","description":"How to create and contribute with new themes\n","excerpt":"How to create and contribute with new themes\n","ref":"/docs/developers/creating-themes/","tags":"","title":"Creating New Themes"},{"body":"▶︎ Can you add a browsing by folder option/mode to Navidrome? While it is technically possible to add a browsing by folder option, doing so would require significant changes to Navidrome’s internal structures across most of its components. We have decided to focus on features that align with our vision of a music server that emphasizes tags. Implementing folder browsing would not only be a major undertaking, but it could also make supporting all of Navidrome’s current and future features more difficult and error-prone.\nHere are a few situations where users might find folder browsing important, and how Navidrome plans to address them:\nGrouping music by classification (e.g., genre): Navidrome already handle genres, you can browse by genres in Subsonic clients, and it will have a dedicated Genre view in the future. There will also be support for the multivalued grouping tag, with a dedicated view as well. Having different releases for the same album: This will be supported soon. Users who don’t have their library tagged: We explicitly do not support this, as it would make it very difficult to support all features Navidrome has and will have. We do not want to have code that “infers” that a folder with a bunch of MP3 files is an album, as this approach would make the code highly complex and error-prone. If browsing by folder is an essential feature for you, there are alternative music servers that offer this functionality. We encourage you to explore these options if folder browsing is a priority.\n▶︎ I have an album with tracks by different artists, why is it broken up into lots of separate albums, each with their own artist? Navidrome only organises music by tags, it will not automatically group a folder containing a bunch of songs with different artists into one album.\nFor a “Various Artists” compilation, the Part Of Compilation tag (TCMP for id3, COMPILATION for FLAC) must be set, for all tracks.\nFor a single-artist album with a different artist name for each track (for example “Alice feat. Bob” , “Alice feat. Carol”), the Album Artist tags must be the same (“Alice”) for all tracks.\n▶︎ How can I edit my music metadata (id3 tags)? How can I rename/move my files? With Navidrome you can’t. Navidrome does not write to your music folder or the files by design. It may have capabilities to change/add cover art for artists, albums and playlists in the future, but even then it won’t write these images to your Music Folder or embed them in the files.\nThe main reason for this is security: With an internet-facing server like Navidrome, users would only be one exploit away from all their music getting deleted.\nThere are many excellent “real” tag editors / music library managers out there to work with your music library.\nNavidrome recommends: beets (Linux, macOS, Windows) and Musicbrainz Picard (Linux, macOS, Windows).\nOthers: mp3tag (Windows, macOS), ExifTool (Linux, macOS, Windows), Yate (macOS), Kid3 (Windows, macOS, Linux), foobar2000 (Windows, macOS), MusicBee (Windows), Media Monkey (Windows), Groove Music (Windows), Windows Media Player (Windows), Apple iTunes (Windows), Apple Music (macOS).\nIf you are new to organizing and tagging your library, take a look at this post about how to use Picard or beets with Navidrome: Organizing music with Musicbrainz Picard\n▶︎ Where are the logs? To achieve maximum compatibility with a great number of platforms, Navidrome follows the Twelve Factor App methodology as much as possible. Specifically in the case of logs, Navidrome does not try to do any storage or routing of any log files, it only outputs all information to stdout, making it easy for the proper logging tools in each platform to handle them. Some examples bellow:\nLinux: if you installed Navidrome using the Systemd unit (as explained in the install instructions), you can see the logs using the journalctl tool: journalctl -u navidrome.service.\nDocker: you can use docker logs or docker-compose logs to retrieve/follow the logs.\nWindows: depending on what you used to install Navidrome as a service, the logs will be in different locations by default:\nif you used Shawl, just check the shawl_for_navidrome_*.log files created in the same location as the Shawl executable. if you used NSSM, the location of the logs are specified by the AppStdout attribute. if you used WinSW, the log file is in the same directory as the WinSW configuration file for the Navidrome service. ▶︎ Which cloud providers help fund the project with a revenue share? PikaPods has partnered with us to offer you an officially supported, cloud-hosted solution. A share of the revenue helps fund the development of Navidrome at no additional cost for you.\n","categories":"","description":"Frequently Asked Questions\n","excerpt":"Frequently Asked Questions\n","ref":"/docs/faq/","tags":"","title":"FAQ"},{"body":"Albums CoverArt fetching for albums is controlled by the CoverArtPriority config option. This is a comma-separated list of places to look for album art images. The default is cover.*, folder.*, front.*, embedded, external, meaning:\nFirst try to find a cover.*, folder.* or front.* image in the album folder(s) If not found, try to read an embedded image from one of the mediafiles for that album If not found, try to fetch it from an external service (currently only Last.fm) If not found, use the cover placeholder (blue record image) MediaFiles Some players (including Navidrome’s own WebUI), can display different cover art images for each track in an album. Navidrome tries to read an embedded image from the mediafile. If it does not have one, it will get the album cover art as explained above. MediaFile cover art can be slow in some systems and can be disabled by setting EnableMediaFileCoverArt=false.\nArtists Image for artists are fetched following these rules:\nTry to read an artist.* image file from the artist folder (the parent folder of all albums of a given artist). Ex: C:\\Music\\U2\\Rattle And Run\\CD1\\01.mp3\nC:\\Music\\U2\\Boy\\01.mp3\nIt will try to read the image from C:\\Music\\U2\\artist.*\nIf not found, try to read an artist.* image from any album for that artist. If more than one is found, the selected one is unpredictable. If not found, it will try to get it from an external source. Currently, this can only be Spotify, if configured. If not found, use the artist image placeholder (grey star image). Playlists Currently, Playlists CoverArt images are generated tiled images, containing up to 4 covers from the albums in the playlist. If for any reason it cannot be generated, it will use the album cover placeholder (blue record image). This is currently only available in the Subsonic API.\n","categories":"","description":"How Navidrome find artist and cover art images\n","excerpt":"How Navidrome find artist and cover art images\n","ref":"/docs/usage/artwork/","tags":"","title":"Artwork location resolution"},{"body":" This documentation is a work in progress. If you feel like something is missing or wrong, please feel free to submit your fixes/suggestions using the links to the right of the screen (only visible in a desktop browser)\n","categories":"","description":"","excerpt":" This documentation is a work in progress. If you feel like something …","ref":"/docs/","tags":"","title":"Documentation"},{"body":"Translations are currently managed in POEditor. If you want to contribute new translations or help reviewing/proofreading any of the existing ones, please join our Discord server, channel #translations, for translation efforts coordination and to get further instructions.\nAlternatively, you can submit a pull request with your proposed changes directly to our project in GitHub.\nDirectory Structure If you choose to contribute translations via a pull request, most of the translation files are located in the resources/i18n directory. These are all served by the Navidrome backend to avoid bloating UI bundle with additional translations. The English translation file is located outside of this main directory at ui/src/i18n/en.json so it can be bundled with the UI.\nTranslation Status ","categories":"","description":"Learn how you can contribute with translations for the UI\n","excerpt":"Learn how you can contribute with translations for the UI\n","ref":"/docs/developers/translations/","tags":"","title":"Translations"},{"body":"Spotify Artist images can be retrieved from Spotify. You’ll need to set the config options Spotify.ID and Spotify.Secret. To obtain these values, create a free account in Spotify, then follow these steps:\nClick on the “Create an App” button in Spotify’s Developer dashboard: https://developer.spotify.com/dashboard/applications: Fill all fields and click on the “Create” button: Copy the values to your configuration file (or set them as environment variables): Last.fm Navidrome can use Last.fm to retrieve artists biographies, artists top songs, similar artists and album covers. It works out-of-the-box, but if you want to setup your own API-KEY, follow these steps:\nYou will need a Last.fm free account, then you’ll need to set the config options LastFM.ApiKey and LastFM.Secret. You can obtain these values by creating an API account in Last.fm:\nGo to https://www.last.fm/api/account/create and create an API account. Only the Application Name field is mandatory: After submitting the form, you can get the API Key and Shared Secret from the Account Created page: Copy the values above to your configuration file (or set them as environment variables) ","categories":"","description":"Configure Navidrome to get information and images from Last.fm and Spotify\n","excerpt":"Configure Navidrome to get information and images from Last.fm and …","ref":"/docs/usage/external-integrations/","tags":"","title":"External Integrations"},{"body":"Supported Subsonic API endpoints Navidrome is currently compatible with Subsonic API v1.16.1, with some exceptions.\nThis is a (hopefully) up-to-date list of all Subsonic API endpoints implemented in Navidrome. Check the “Notes” column for limitations/missing behavior. Also keep in mind these differences between Navidrome and Subsonic:\nNavidrome will not implement any video related functionality, it is focused on Music only Right now, Navidrome only works with a single Music Library (Music Folder) There are currently no plans to support browse-by-folder. Endpoints for this functionality (Ex: getIndexes, getMusicDirectory) returns a simulated directory tree, using the format: /Artist/Album/01 - Song.mp3. Navidrome does not mark songs as played by calls to stream, only when scrobble is called with submission=true IDs in Navidrome are always strings, normally MD5 hashes or UUIDs. This is important to mention because, even though the Subsonic API schema specifies IDs as strings, some clients insist in converting IDs to integers System ping getLicense Always valid ;) Browsing getMusicFolders Hardcoded to just one, set with ND_MUSICFOLDER configuration getIndexes Doesn’t support shortcuts, nor direct children getMusicDirectory getSong getArtists getArtist getAlbum getGenres getArtistInfo Requires Last.fm and Spotify integration getArtistInfo2 Requires Last.fm and Spotify integration getAlbumInfo Requires Last.fm and Spotify integration getAlbumInfo2 Requires Last.fm and Spotify integration getTopSongs Requires Last.fm integration getSimilarSongs Requires Last.fm integration getSimilarSongs2 Requires Last.fm integration Album/Songs Lists getAlbumList getAlbumList2 getStarred getStarred2 getNowPlaying getRandomSongs getSongsByGenre Searching search2 Doesn’t support Lucene queries, only simple auto complete queries search3 Doesn’t support Lucene queries, only simple auto complete queries Playlists getPlaylists username parameter is not implemented getPlaylist createPlaylist updatePlaylist deletePlaylist Media Retrieval stream download Accepts ids for Songs, Albums, Artists and Playlists. Also accepts transcoding options similar to stream getCoverArt getLyrics Currently only works with embedded lyrics getAvatar If Gravatar is enabled and the user has an email, returns a redirect to their Gravatar. Or else returns a placeholder Media Annotation star unstar setRating scrobble Bookmarks getBookmarks createBookmark deleteBookmark getPlayQueue current is a string id, not int as it shows in the official Subsonic API documentation savePlayQueue Sharing (if EnableSharing is true) getShares createShare updateShare deleteShare Internet radio getInternetRadioStations createInternetRadioStation updateInternetRadioStation deleteInternetRadioStation User Management getUser Hardcoded all roles. Ignores username parameter, and returns the user identified in the authentication getUsers Returns only the user identified in the authentication Media library scanning getScanStatus Also returns the extra fields lastScan and folderCount startScan Accepts an extra fullScan boolean param, to force a full scan ","categories":"","description":"Are you a Subsonic client developer? Check out the API features supported by Navidrome\n","excerpt":"Are you a Subsonic client developer? Check out the API features …","ref":"/docs/developers/subsonic-api/","tags":"","title":"Subsonic API Compatibility"},{"body":" NOTE Please be aware that the Sharing feature is still under active development, and improvements to functionality and security are expected in future updates. Please report any issues or suggestions to the Navidrome GitHub issues page. Navidrome has a “Sharing” feature which allows users to generate a shareable link for a track, album, artist, or playlist. This link can then be sent to friends, allowing them to listen or download the music without having an account on your Navidrome instance.\nEnabling the Sharing Feature As of version 0.49.3, the Sharing feature is disabled by default. To enable it, you need to adjust your Navidrome configuration. In your configuration file, set EnableSharing=true, or set the environment variable ND_ENABLESHARING=true.\nOnce the Sharing feature is enabled, all users will have access to all existing shares. This includes the ability to change the description and expiration date of the shares, as well as the capability to create new shares.\nPlease note that at this time, there is no way to set specific sharing permissions per user. This means that once the Sharing feature is enabled, all users have equal access and capabilities related to sharing. This includes the ability to view, modify, and create shares.\nDue to this, we advise you to enable this feature only if you are comfortable with these permissions. Future updates may include more granular permission controls for sharing.\nUsing the Sharing Feature Once the Sharing feature is enabled, all users will be able to access current shares, modify descriptions and expiration, and create new ones. However, as of the initial implementation, there is currently no way to set permissions per user.\nWhen browsing your music collection, you will notice a “Share” button or menu item available for each item, be it a track, album, artist, or playlist. To share an item, simply click on this “Share” button.\nUpon clicking the “Share” button, a dialog box will appear, allowing you to configure your share. This includes setting a description other configurations for the share.\nOnce you have configured your share as desired, click the “Share” button. This will generate a unique shareable link, which you can then copy and share with your friends.\nThe generated sharable links will be in the following format: http://yourserver.com/share/XXXXXXXXXX. If you have Navidrome behind a reverse proxy, ensure you allow traffic to /share.\nSubsonic API Endpoints The Sharing feature also implements the related Subsonic API endpoints. See the API docs for implemented endpoints\nMeta-tags to HTML Meta-tags are added to the HTML to provide some information about the shared music on chat platforms. Example of a link shared in Discord:\n","categories":"","description":"How to create links to your media to be shared on Facebook, Twitter, WhatsApp\n","excerpt":"How to create links to your media to be shared on Facebook, Twitter, …","ref":"/docs/usage/sharing/","tags":"","title":"Sharing"},{"body":"Currently, navidrome supports monitoring and alerting using Prometheus/OpenMetrics standard. Example Grafana dashboard:\nConfiguration You need to set ND_PROMETHEUS_ENABLED to enable Prometheus metrics endpoint. Setting custom ND_PROMETHEUS_METRICSPATH is highly recommended if your Navidrome instance is publicly available.\nMinimal docker compose example file with metrics enabled:\nversion: '3' services: navidrome: image: deluan/navidrome user: 1000:1000 # should be owner of volumes ports: - \"4533:4533\" environment: ND_PROMETHEUS_ENABLED: \"true\" ND_PROMETHEUS_METRICSPATH: \"/metrics_SOME_SECRET_KEY\" volumes: - \"./data:/data\" - \"./music:/music\" Example prometheus.yml config to parse this instance:\nglobal: scrape_interval: 10s scrape_configs: - job_name: 'navidrome' metrics_path: /metrics_SOME_SECRET_KEY scheme: http static_configs: - targets: ['YOUR_IP_HERE:4533'] Dashboard Grafana dashboard available here: #18038.\nSimple to install but fully fledged Grafana docker compose configuration can be found here.\n","categories":"","description":"How to monitor status of your navidrome instance\n","excerpt":"How to monitor status of your navidrome instance\n","ref":"/docs/usage/monitoring/","tags":"","title":"Monitoring Navidrome"},{"body":"Permissions You should NOT run Navidrome as root. Ideally you should have it running under its own user. Navidrome only needs read-only access to the Music Folder, and read-write permissions to the Data Folder.\nEncrypted passwords To be able to keep compatibility with the Subsonic API and its clients, Navidrome needs to store user’s passwords in its database. By default, Navidrome encrypts the passwords in the DB with a shared encryption key, just for the sake of obfuscation as this key can be easily found in the codebase.\nThis key can be overridden by the config option PasswordEncryptionKey. Once this option is set and Navidrome is restarted, it will re-encrypt all passwords with this new key. This is a one-time only configuration, and after this point the config option cannot be changed anymore or else users won’t be able to authenticate.\nNetwork configuration Even though Navidrome comes with an embedded, full-featured HTTP server, you should seriously consider running it behind a reverse proxy (Ex: Caddy, Nginx, Traefik, Apache) for added security, including setting up SSL. There are tons of good resources on the web on how to properly setup a reverse proxy.\nWhen using Navidrome in such configuration, you may want to prevent Navidrome from listening to all IPs configured in your computer, and only listen to localhost. This can be achieved by setting the Address flag to localhost\nReverse proxy authentication When reverse proxy authentication is used, the verification is done by another system. By checking a specific HTTP header, Navidrome assumes you are already authenticated. This header can be configured via ReverseProxyUserHeader configuration option. By default, the Remote-User header is used.\nBy default, Navidrome denies every attempt. Authentication proxy needs to be whitelisted in CIDR format, using ReverseProxyWhitelist. Both IPv4 and IPv6 are supported.\nIf you enable this feature and uses a Subsonic client, you must whitelist the Subsonic API URL, as this authentication method is incompatible with the Subsonic authentication. You will need to whitelist the /rest/* URLs.\nIf a user is successfully authenticated by the proxy, but it does not exist in the Navidrome DB, it will be created with a random password. The user can change this password if they plan to use a Subsonic client.\nIf you plan to use the Sharing option, where you can create unauthenticated links to parts of your library, you’ll need to whitelist /share/* URLs.\nTranscoding configuration To configure transcoding, Navidrome’s WebUI provide a screen that allows you to edit existing transcoding configurations and to add new ones. That is similar to other music servers available in the market that provide transcoding on-demand.\nThe issue with this is that it potentially allows an attacker to run any command in your server. This married with the fact that some Navidrome installations don’t use SSL and/or run it as a super-user (root or Administrator), is a recipe for disaster!\nIn an effort to make Navidrome as secure as possible, we decided to disable the transcoding configuration editing in the UI by default. If you need to edit it (add or change a configuration), start Navidrome with the ND_ENABLETRANSCODINGCONFIG set to true. After doing your changes, don’t forget to remove this option or set it to false.\nLimit login attempts To protect against brute-force attacks, Navidrome is configured by default with a login rate limiter, It uses a Sliding Window algorithm to block too many consecutive login attempts. It is enabled by default and you don’t need to do anything. The rate limiter can be fine tuned using the flags AuthRequestLimit and AuthWindowLength and can be disabled by setting AuthRequestLimit to 0, though it is not recommended.\n","categories":"","description":"Information on how to making your installation more secure\n","excerpt":"Information on how to making your installation more secure\n","ref":"/docs/usage/security/","tags":"","title":"Security Considerations"},{"body":"Docker images are available for the linux/amd64, linux/arm/v6, linux/arm/v7 and linux/arm64 platforms. They include everything needed to run Navidrome.\nUsing docker-compose : Create a docker-compose.yml file with the following content (or add the navidrome service below to your existing file):\nversion: \"3\" services: navidrome: image: deluan/navidrome:latest user: 1000:1000 # should be owner of volumes ports: - \"4533:4533\" restart: unless-stopped environment: # Optional: put your config options customization here. Examples: ND_SCANSCHEDULE: 1h ND_LOGLEVEL: info ND_SESSIONTIMEOUT: 24h ND_BASEURL: \"\" volumes: - \"/path/to/data:/data\" - \"/path/to/your/music/folder:/music:ro\" Start it with docker-compose up -d. Note that the environment variables above are just an example and are not required. The values in the example are already the defaults\nUsing docker command line tool: $ docker run -d \\ --name navidrome \\ --restart=unless-stopped \\ --user $(id -u):$(id -g) \\ -v /path/to/music:/music \\ -v /path/to/data:/data \\ -p 4533:4533 \\ -e ND_LOGLEVEL=info \\ deluan/navidrome:latest Customization The user argument should ideally reflect the UID:GID of the owner of the music library to avoid permission issues. For testing purpose you could omit this directive, but as a rule of thumb you should not run a production container as root. Remember to change the volumes paths to point to your local paths. /data is where Navidrome will store its DB and cache, /music is where your music files are stored. Configuration options can be customized with environment variables as needed. For docker-compose just add them to the environment section or the yml file. For docker cli use the -e parameter. Ex: -e ND_SESSIONTIMEOUT=24h. If you want to use a configuration file with Navidrome running in Docker, you can create a navidrome.toml config file in the /data folder and set the option ND_CONFIGFILE=/data/navidrome.toml. ","categories":"","description":"Using the official docker images with Docker and Docker Compose\n","excerpt":"Using the official docker images with Docker and Docker Compose\n","ref":"/docs/installation/docker/","tags":"","title":"Installing with Docker"},{"body":" NOTE: These instructions were created for the Ubuntu distribution, and even though they contain specific Ubuntu/Debian instructions (ex: apt) the concepts are generic enough and can be applied on most Linux distributions, even on those not based on Debian (ex: CentOS and OpenSUSE)\nThe following steps have been tested on Ubuntu 18.04 and should work on all version 16.04 and above as well as other Debian based distros. Throughout these instructions the commands will have placeholders for the user (\u003cuser\u003e) and group (\u003cgroup\u003e) you want to run Navidrome under and the music folder path (\u003clibrary_path\u003e). If you are using an existing media library ensure the user has permissions to the media library.\nUpdate and Install Prerequisites Ensure your system is up to date and install ffmpeg.\nsudo apt update sudo apt upgrade sudo apt install vim ffmpeg Create Directory Structure Create a directory to store the Navidrome executable and a working directory with the proper permissions.\nsudo install -d -o \u003cuser\u003e -g \u003cgroup\u003e /opt/navidrome sudo install -d -o \u003cuser\u003e -g \u003cgroup\u003e /var/lib/navidrome Get Navidrome Download the latest release from the releases page, extract the contents to the executable directory, and set the permissions for the files. (Replace the URL below with the one from the releases page):\nwget https://github.com/navidrome/navidrome/releases/download/v0.XX.0/navidrome_0.XX.0_Linux_x86_64.tar.gz -O Navidrome.tar.gz sudo tar -xvzf Navidrome.tar.gz -C /opt/navidrome/ sudo chown -R \u003cuser\u003e:\u003cgroup\u003e /opt/navidrome Create Configuration File In the working directory, /var/lib/navidrome create a new file named navidrome.toml with the following settings.\nMusicFolder = \"\u003clibrary_path\u003e\" For additional configuration options see the configuration options page.\nCreate a Systemd Unit Create a new file under /etc/systemd/system/ named navidrome.service with the following data. Make sure you replace \u003cuser\u003e and \u003cgroup\u003e with the user and group you want to run Navidrome under.\n[Unit] Description=Navidrome Music Server and Streamer compatible with Subsonic/Airsonic After=remote-fs.target network.target AssertPathExists=/var/lib/navidrome [Install] WantedBy=multi-user.target [Service] User=\u003cuser\u003e Group=\u003cgroup\u003e Type=simple ExecStart=/opt/navidrome/navidrome --configfile \"/var/lib/navidrome/navidrome.toml\" WorkingDirectory=/var/lib/navidrome TimeoutStopSec=20 KillMode=process Restart=on-failure # See https://www.freedesktop.org/software/systemd/man/systemd.exec.html DevicePolicy=closed NoNewPrivileges=yes PrivateTmp=yes PrivateUsers=yes ProtectControlGroups=yes ProtectKernelModules=yes ProtectKernelTunables=yes RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6 RestrictNamespaces=yes RestrictRealtime=yes SystemCallFilter=~@clock @debug @module @mount @obsolete @reboot @setuid @swap ReadWritePaths=/var/lib/navidrome # You can uncomment the following line if you're not using the jukebox This # will prevent navidrome from accessing any real (physical) devices #PrivateDevices=yes # You can change the following line to `strict` instead of `full` if you don't # want navidrome to be able to write anything on your filesystem outside of # /var/lib/navidrome. ProtectSystem=full # You can uncomment the following line if you don't have any media in /home/*. # This will prevent navidrome from ever reading/writing anything there. #ProtectHome=true # You can customize some Navidrome config options by setting environment variables here. Ex: #Environment=ND_BASEURL=\"/navidrome\" Start the Navidrome Service Reload the service daemon, start the newly create service, and verify it has started correctly.\nsudo systemctl daemon-reload sudo systemctl start navidrome.service sudo systemctl status navidrome.service If the service has started correctly verify you can access http://localhost:4533.\nStart Navidrome on Startup sudo systemctl enable navidrome.service ","categories":"","description":"Steps to install on Ubuntu Linux (and other Debian based distros)\n","excerpt":"Steps to install on Ubuntu Linux (and other Debian based distros)\n","ref":"/docs/installation/linux/","tags":"","title":"Linux Install"},{"body":"Since Navidrome needs to be run from the command line, it is suggested to use a service wrapper to make it into a service as it does not make sense to have a terminal window open whenever you want to use Navidrome. The examples below are for Shawl, NSSM and WinSW.\nNote The default account for new services is the Local System account, which has a different PATH environment variable than your user account.\nIf you need to have access to your user account’s PATH environment variables, the easiest way is to change the user account used by the service. To do so, open the Services management console (Win+R, then open services.msc), locate the Navidrome service, head to the Log On tab, and change it there. Using Shawl Prebuilt binaries are available on the releases page of Shawl. It’s portable, so you can simply download it and put it anywhere without going through an installer. Otherwise if you have Rust installed, you can run cargo install shawl.\nHere’s how you create the service with Shawl, then start it. Note that this has to be run from an administrator command prompt.\nshawl add --name Navidrome -- \"C:\\Services\\navidrome\\navidrome.exe\" -c \"C:\\Services\\navidrome\\navidrome.toml\" sc start Navidrome Note When using Shawl, you have to use absolute paths when specifying folders/files as arguments to the navidrome binary and in the configuration file (remember to escape the backslashes in the configuration file). Refer to the configuration options page for more information about the available options. Using NSSM No installation is required for NSSM. Just grab the latest release from their download page and install the Navidrome service from an administrator command prompt using NSSM:\nnssm install Navidrome This opens a window where you can set the properties of the service; most notably, the path to the executable, the user account on which to run the service, the output files (stout and sterr) and file rotation. More information about the configurable options can be found here.\nYou can also bypass the GUI and install the service from the command line only. Below is an example:\nnssm install Navidrome \"C:\\Services\\navidrome\\navidrome.exe\" nssm set Navidrome AppDirectory \"C:\\Services\\navidrome\\\" nssm set Navidrome DisplayName Navidrome # The username and password of the user account under which the service will run. nssm set Navidrome ObjectName \"username\" \"password\" nssm set Navidrome AppStdout \"C:\\Services\\navidrome\\navidrome.log\" nssm set Navidrome AppStderr \"C:\\Services\\navidrome\\navidrome.log\" nssm set Navidrome AppRotateFiles 1 nssm set Navidrome AppRotateSeconds 86400 nssm set Navidrome AppRotateBytes 10240 # Start the service sc start Navidrome Using WinSW To use WinSW, download the WinSW binary from their download page. WinSW also requires a configuration file (more details about the WinSW configuration file here) to be able to manage an application.\nA basic example (where both Navidrome and the WinSW configuration file are in the same directory) for Navidrome is down below:\n\u003cservice\u003e \u003cid\u003eNavidrome\u003c/id\u003e \u003cname\u003eNavidrome\u003c/name\u003e \u003cdescription\u003eModern Music Server and Streamer compatible with Subsonic/Airsonic\u003c/description\u003e \u003cexecutable\u003eC:\\Services\\navidrome\\navidrome.exe\u003c/executable\u003e \u003carguments\u003e-c navidrome.toml\u003c/arguments\u003e \u003clog mode=\"roll-by-size\"\u003e\u003c/log\u003e \u003c/service\u003e Note When specifying files or folders in the WinSW configuration file, relative paths are resolved based on where the configuration file is located. Save this in a file named navidrome.xml. Then, run these commands from an administrator command prompt to install the service, start it and check its status:\nwinsw install navidrome.xml winsw start navidrome.xml winsw status navidrome.xml Verify that the service has started as expected by navigating to http://localhost:4533, by checking the Services Management Console or by checking the log file that the service wrapper created.\n","categories":"","description":"Steps to install on Windows\n","excerpt":"Steps to install on Windows\n","ref":"/docs/installation/windows/","tags":"","title":"Windows Install"},{"body":"Navidrome can be ran by simply double-clicking the binary that has been downloaded from the release page or by running it in the command line. However, that will keep a terminal window open while Navidrome is running.\nTo have Navidrome running in the background, we can run it as a service. We define a service as shown below and save that in a file named navidrome.plist in the ~/Library/LaunchAgents/ folder.\nThe example shown assumes a few things:\nThe binary has been downloaded and extracted to the /opt/navidrome folder. A configuration file for Navidrome has been created and is named navidrome.toml in that folder. Be sure to set the DataFolder option as well. A log file for Navidrome has been created and is named navidrome.log in that folder. \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e \u003cplist version=\"1.0\"\u003e \u003cdict\u003e \u003ckey\u003eLabel\u003c/key\u003e \u003cstring\u003enavidrome\u003c/string\u003e \u003ckey\u003eProgramArguments\u003c/key\u003e \u003carray\u003e \u003cstring\u003e/opt/navidrome/navidrome\u003c/string\u003e \u003cstring\u003e-c\u003c/string\u003e \u003cstring\u003e/opt/navidrome/navidrome.toml\u003c/string\u003e \u003c/array\u003e \u003ckey\u003eRunAtLoad\u003c/key\u003e \u003ctrue/\u003e \u003ckey\u003eStandardOutPath\u003c/key\u003e \u003cstring\u003e/opt/navidrome/navidrome.log\u003c/string\u003e \u003ckey\u003eStandardErrorPath\u003c/key\u003e \u003cstring\u003e/opt/navidrome/navidrome.log\u003c/string\u003e \u003c/dict\u003e \u003c/plist\u003e Then to load the service, run:\nlaunchctl load ~/Library/LaunchAgents/navidrome.plist To start the service, run:\nlaunchctl start navidrome You can verify that Navidrome has started by navigating to http://localhost:4533, by running launchctl list | grep navidrome or by checking the log file specified.\nTo stop the service, run:\nlaunchctl stop navidrome ","categories":"","description":"Steps to install on macOS\n","excerpt":"Steps to install on macOS\n","ref":"/docs/installation/macos/","tags":"","title":"macOS Install"},{"body":"The following steps have been tested on FreeBSD 12 and 13. They should work on all versions 11.4 and above as well as other supported versions. All prerequisites will be automatically installed when using a package or if building from ports. Throughout these instructions the commands will have placeholders for the user (\u003cuser\u003e) and group (\u003cgroup\u003e) you want to run Navidrome under and the music folder path (\u003clibrary_path\u003e). If you are using an existing media library ensure the user has permissions to the media library.\nInstall Using Package Use the package tool (pkg) to install Navidrome from a binary package.\npkg install navidrome Follow any on screen instructions to complete your installation.\nBuild \u0026 Install Using Ports Instead of using a binary package you can build from source. Before you start, make sure your local ports tree is up to date. Refer to the FreeBSD Handbook on the recommended way to fetch or update your ports tree.\nSwitch to the port directory for Navidrome and run make install.\ncd /usr/ports/multimedia/navidrome make install The build process could take several minutes depending on the speed of your computer. Follow any on screen instructions to complete your installation.\nStart the Navidrome Service Start the service and verify it has started correctly.\nservice navidrome onestart service navidrome onestatus Navidrome is configured to listen on 127.0.0.1 on port 4533. The \u003clibrary_path\u003e is preset to ${PREFIX}/share/navidrome/music If the service has started correctly, verify you can access http://localhost:4533.\nTo run Navidrome at system startup, enable the service in /etc/rc.conf:\nsysrc navidrome_enable=\"YES\" Customizing your Installation The defaults provided out of the box by the port and package are sufficient to get your started. You can customize these settings if required by using a combonation of /etc/rc.conf and the Navidrome configuration file.\nRun as a Different User Navidrome will run as the www user. If you need to change it to something else use /etc/rc.conf to set a user and group. You can easily adjust this using the sysrc tool:\nsysrc navidrome_user=\"\u003cuser\u003e\"\rsysrc navidrome_group=\"\u003cgroup\u003e\" Configuration File Location A default configuration file will be installed under /usr/local/etc/navidrome named config.toml. This can be changed by setting a new path in /etc/rc.conf. You can easily adjust this using the sysrc tool:\nsysrc navidrome_config=\"/path/to/new/config_file.toml\" Make sure the user Navidrome is running as has permission to read the file.\nFor additional configuration options see the configuration options page.\nData Folder The data folder is located under /var/db/navidrome. The prefered way to change this is by using /etc/rc.conf You can easily adjust this using the sysrc tool:\nsysrc navidrome_datafolder=\"/path/to/new/folder\" Make sure the user Navidrome is running as has permission to read and write to the folder contents.\n","categories":"","description":"Steps to install on FreeBSD (using ports or package)\n","excerpt":"Steps to install on FreeBSD (using ports or package)\n","ref":"/docs/installation/freebsd/","tags":"","title":"FreeBSD Install"},{"body":" DISCLAIMER: These packages are not maintained by the Navidrome project, any issues should be reported to their authors.\nEven though the Navidrome project does not provide any pre-packaged installation for specific platforms, there are some packages created and maintained by the community, that can simplify the setup on some systems.\nHere is the list of packages for various OSes/Distributions, provided by Repology:\nMore packages available, with links to download/install instructions:\nSystem Information Ansible Role https://github.com/zfuller/navidrome-role Arch Linux You can install Navidrome via the navidrome-bin package in the AUR. Alternatively, you can install using the navidrome-git package which will compile Navidrome from source. Cloudron https://www.cloudron.io/store/org.navidrome.cloudronapp.html Fedora https://copr.fedorainfracloud.org/coprs/lchh/navidrome/ Kubernets Chart https://artifacthub.io/packages/helm/emmas-charts/navidrome Nix/NixOS Package and module definitions in nixpkgs OpenMediaVault Instructions using docker-compose QNAP https://www.qnapclub.eu/en/qpkg/958 TrueNAS SCALE https://truecharts.org/apps/stable/navidrome YunoHost https://yunohost.org/en/app_navidrome If you create, or know of, other Navidrome packages that are publicly available, please add to the list above.\n","categories":"","description":"Navidrome packages for simpler installation on some platforms, powered by You!\n","excerpt":"Navidrome packages for simpler installation on some platforms, powered …","ref":"/docs/installation/packages/","tags":"","title":"Community Maintained Packages"},{"body":"The following providers offer managed hosting for Navidrome. This can be a good option if you don’t want to manage your own server.\nPikaPods PikaPods has partnered with us to offer you an officially supported, cloud-hosted solution*.\nOffers 1-click deployments for Navidrome with $5 free welcome credit. EU and US regions available. Includes daily backups and regular app updates.\n","categories":"","description":"Providers offering hosting for Navidrome\n","excerpt":"Providers offering hosting for Navidrome\n","ref":"/docs/installation/managed/","tags":"","title":"Managed Hosting"},{"body":" Currently these instructions only work for Unix-based systems (Linux, macOS, BSD, …). If you are getting trouble trying to build Navidrome in a Windows system, please join our Discord server and ask for help, we will be glad to assist you\nIf you can’t find a pre-built binary for your platform, you should open an issue in the project’s GitHub page.\nIf you don’t want to wait, you can try to build the binary yourself, with the following steps.\nFirst, you will need to install Go 1.19+ and Node 16. The setup is very strict, and the steps below only work with these versions (enforced in the Makefile). Make sure to add $GOPATH/bin to your PATH as described in the official Go site\nYou’ll also need to install the TagLib library:\nDebian/Ubuntu: sudo apt install libtag1-dev Arch Linux: pacman -S taglib macOS: brew install taglib FreeBSD: pkg install taglib For other platforms check their installation instructions After the prerequisites above are installed, clone Navidrome’s repository and build it:\n$ git clone https://github.com/navidrome/navidrome $ cd navidrome $ make setup # Install build dependencies $ make buildall # Build UI and server, generates a single executable On FreeBSD you have to use gmake:\n$ git clone https://github.com/navidrome/navidrome $ cd navidrome $ gmake setup # Install build dependencies $ gmake buildall # Build UI and server, generates a single executable This will generate the navidrome executable binary in the project’s root folder.\nNOTE: Remember to install ffmpeg in your system, a requirement for Navidrome to work properly. You may find the latest static build for your platform here: https://johnvansickle.com/ffmpeg/\n","categories":"","description":"Can't find a build for your platform? You can try to build it yourself\n","excerpt":"Can't find a build for your platform? You can try to build it yourself …","ref":"/docs/installation/build-from-source/","tags":"","title":"Build from sources"},{"body":"","categories":"","description":"","excerpt":"","ref":"/index.json","tags":"","title":""},{"body":" 关于本课程 Navidrome is a self-hosted, open source music server and streamer. It gives you freedom to listen to your music collection from any browser or mobile device. 课程亮点 从零入门生信分析，基于“交我算”校级计算平台进行实操，手把手带你入门生信分析；拓展视野，了解前沿，帮你在分析达人的路上走的更远。\n课程简介 本课程主要介绍数据密集型生物信息学应用的背景知识以及AI计算、高性能计算等前沿技术在生物信息分析中的实践应用。课程内容包括教授学生选择合适的生物信息学计算工具和工作流程，以及如何使用高性能计算平台来加快和最大化生物信息学分析的效率。具体而言，课程将教授学生如何从生信数据库下载数据、如何有效使用可用计算节点、如何优化作业以达到尽可能高效的在相应计算节点上运行、如何使应用程序适应不同计算节点上的可用资源，以及如何合理高效的使用交我算平台计算资源完成生信分析。\n本课程采用理论授课和上机实践相结合的授课方式，旨在让学生掌握最前沿的计算技术，又能让学生将计算应用于生物信息学领域解决实际问题。\n选课时间 选课时间为：2023年9月11日（第1周周一）13:00-9月19日（第2周周二）09:00，共分为两个阶段。\n第一阶段：9月11日（第1周周一）13:00-9月18日（第2周周一）09:00，同学们可进行选课和退课；\n第二阶段：9月18日（第2周周一）13:00-9月19日（第2周周二）09:00，则只能进行选课，不能退课。\n","categories":"","description":"","excerpt":" 关于本课程 Navidrome is a self-hosted, open source music server and …","ref":"/about/","tags":"","title":"About Navidrome"},{"body":"\r计算生物学：前沿技术与计算实践 Learn More Download 本科生公共选修课 AI1108\nNavidrome allows you to enjoy your music collection from anywhere, by making it available through a modern Web UI and through a wide range of third-party compatible mobile apps, for both iOS and Android devices.\nNavidrome is open source software distributed free of charge under the terms of the GNU GPL v3 license.\nAccess your music from anywhere! Choose from a large selection of mobile clients or use the integrated web player\nRead more …\nBlazing fast! Lightweight, fast and self-contained. Runs well even on resource-limited platforms (ex: Raspberry Pi)\nRead more …\nHandles large libraries! Plays well with gigantic music collections (tested with ~900K songs - 2/3 FLAC, 1/3 MP3)\nRead more …\nTranscoding on the fly! Converts/reduces your music files as you play them, so you don’t nuke your data plan\nRead more …\nModern and up-to-date Built with new technologies (GoLang, ReactJS, Material-UI), to ensure modern features and compatibility\nRead more …\nSubsonic API Compatible with the de facto standard Music API, supporting all its clients and ecosystem\nRead more …\nActive project! New releases on a regular basis, adding features and bug fixes\nRead more …\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nJoin the conversation! For announcement of latest features, discussions and help from your fellow users, join our Reddit or our Discord\nRead more …\n","categories":"","description":"","excerpt":"\r计算生物学：前沿技术与计算实践 Learn More Download 本科生公共选修课 AI1108\nNavidrome allows …","ref":"/","tags":"","title":"Navidrome"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":" 授课教师 Go to our demo site Want to try Navidrome before installing it? Not a problem! Just head to our demo site and enjoy some free music, courtesy of the fine folks from Jamendo Music, Chillhop Music, Nine Inch Nails, NCS Music, blocSonic and the respective artists.\nhttps://hpc.sjtu.edu.cn/~wang/\nThe demo server works with all Subsonic clients, just use the server address https://demo.navidrome.org with the credentials above. Not all features are enabled in the demo. For instance, settings are disabled.\nDemo server configuration The server is running on the inexpensive PikaPods managed hosting with the following configuration:\n1 Core Processor 512MB Memory 10GB Disk Space Approximate Cost: $2.27/month PikaPods has partnered with us to offer you an officially supported, cloud-hosted solution. A share of the revenue helps fund the development of Navidrome at no additional cost for you.\n","categories":"","description":"","excerpt":" 授课教师 Go to our demo site Want to try Navidrome before installing it? …","ref":"/slides/","tags":"","title":"课件发布"}]